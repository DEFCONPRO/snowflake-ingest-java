/*
 * Copyright (c) 2021 Snowflake Computing Inc. All rights reserved.
 */

package net.snowflake.ingest.streaming.internal;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.snowflake.ingest.utils.ErrorCode;
import net.snowflake.ingest.utils.SFException;
import net.snowflake.ingest.utils.StreamingUtils;
import org.apache.http.client.utils.URIBuilder;

/**
 * The request that gets sent to Snowflake to register one or more blobs generated by the flush
 * service
 */
public class RegisterBlobRequest {
  private final String requestId;
  private final List<BlobMetadata> blobs;

  public static RegisterBlobRequestBuilder builder() {
    return new RegisterBlobRequestBuilder();
  }

  /** Builder class to build a RegisterBlobRequest */
  public static class RegisterBlobRequestBuilder {
    private String requestId;
    private List<BlobMetadata> blobs;

    public RegisterBlobRequestBuilder setRequestId(String requestId) {
      this.requestId = requestId;
      return this;
    }

    public RegisterBlobRequestBuilder setBlobList(List<BlobMetadata> blobs) {
      this.blobs = blobs;
      return this;
    }

    public RegisterBlobRequest build() {
      StreamingUtils.assertNotNull("register blob request blob list", blobs);
      return new RegisterBlobRequest(this);
    }
  }

  private RegisterBlobRequest(RegisterBlobRequestBuilder builder) {
    this.requestId = builder.requestId;
    this.blobs = builder.blobs;
  }

  /**
   * Construct the register blob POST request
   *
   * @param accountURL
   * @return the http POST request
   */
  public HttpRequest getHttpRequest(SnowflakeURL accountURL) {
    Map<Object, Object> payload = new HashMap<>();
    payload.put("request_id", this.requestId);
    payload.put("blobs", this.blobs);

    HttpRequest request = null;
    try {
      URI uri =
          new URIBuilder()
              .setScheme(accountURL.getScheme())
              .setHost(accountURL.getFullUrl())
              .setPath(Constants.REGISTER_BLOB_ENDPOINT)
              .build();

      // TODO SNOW-349081: add user agent and JWT token to header
      request =
          HttpRequest.newBuilder()
              .uri(uri)
              .setHeader("content-type", "application/json")
              .setHeader("accept", "application/json")
              .POST(
                  HttpRequest.BodyPublishers.ofString(
                      new ObjectMapper().writeValueAsString(payload)))
              .build();
    } catch (JsonProcessingException | URISyntaxException e) {
      throw new SFException(e, ErrorCode.BUILD_REQUEST_FAILURE, "register blob");
    }

    StreamingUtils.assertNotNull("register Blob request", request);
    return request;
  }
}
